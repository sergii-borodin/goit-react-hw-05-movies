{"version":3,"file":"static/js/779.c8e6a6d0.chunk.js","mappings":"8SAEMA,EAAU,mCAEhBC,EAAAA,EAAAA,SAAAA,QAAyB,gCAElB,IAAMC,EAAmB,mCAAG,oGACVD,EAAAA,EAAAA,IAAA,mBAJX,aAIW,oBAAuCD,IAD7B,cAC3BG,EAD2B,yBAG1BA,EAASC,MAHiB,2CAAH,qDAMnBC,EAAc,mCAAG,WAAMC,GAAN,uFACLL,EAAAA,EAAAA,IAAA,gBAAmBK,EAAnB,oBAAsCN,IADjC,cACtBG,EADsB,yBAGrBA,EAASC,MAHY,2CAAH,sDAMdG,EAAsB,mCAAG,WAAMD,GAAN,uFACbL,EAAAA,EAAAA,IAAA,gBACZK,EADY,4BACeN,IAFF,cAC9BG,EAD8B,yBAI7BA,EAASC,MAJoB,2CAAH,sDAOtBI,EAAyB,mCAAG,WAAMF,GAAN,uFAChBL,EAAAA,EAAAA,IAAA,gBACZK,EADY,4BACeN,IAFC,cACjCG,EADiC,yBAKhCA,EAASC,MALuB,2CAAH,sDAQzBK,EAAiB,mCAAG,WAAMC,GAAN,uFACRT,EAAAA,EAAAA,IAAA,+BACGD,EADH,kBACoBU,EADpB,oBADQ,cACzBP,EADyB,yBAKxBA,EAASC,MALe,2CAAH,qD,2JC/BjBO,EAAcC,EAAAA,GAAAA,GAAH,8HASXC,EAAaD,EAAAA,GAAAA,GAAH,0H,SCgCvB,EArCgB,SAAAE,GACd,OAAsCC,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACQX,GAAYY,EAAAA,EAAAA,MAAZZ,QAeR,OAbAa,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAuB,mCAAG,WAAMd,GAAN,kGAEFe,EAAAA,GAAqCf,GAFnC,gBAEpBgB,EAFoB,EAEpBA,QACRL,EAAeK,GACfC,QAAQC,IAAI,UAAWF,GAJK,gDAM5BC,QAAQC,IAAI,KAAMC,SANU,yDAAH,sDAS7BL,EAAwBd,EAEzB,GAAE,CAACA,KAEF,SAACK,EAAD,UACGK,IAAgB,GACfA,EAAYU,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACd,SAAChB,EAAD,WACE,gCACE,wBACE,uBAAIe,OAEN,uBAAIC,QALSF,EADH,KAWhB,2DAIP,C","sources":["ApiService.js","components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = '9fbe85233379d275904e898da5aa337c';\nconst query = 'movie/week';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const fetchTrendingMovies = async () => {\n  const response = await axios.get(`trending/${query}?api_key=${API_KEY}`);\n\n  return response.data;\n};\n\nexport const fetchMovieById = async movieId => {\n  const response = await axios.get(`movie/${movieId}?api_key=${API_KEY}`);\n\n  return response.data;\n};\n\nexport const fetchCastInfoByMovieId = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}/credits?api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\nexport const fetchReviewsInfoByMovieId = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}/reviews?api_key=${API_KEY}`\n  );\n\n  return response.data;\n};\n\nexport const fetchMoviesByName = async movieName => {\n  const response = await axios.get(\n    `search/movie?api_key=${API_KEY}&query=${movieName}&language=en-US`\n  );\n\n  return response.data;\n};\n","import styled from 'styled-components';\n\nexport const ReviewsList = styled.ul`\n  padding-left: 0;\n\n  list-style: none;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n`;\n\nexport const ReviewItem = styled.li`\n  padding-right: 10px;\n  padding-left: 10px;\n  border: 1px solid black;\n  border-radius: 5px;\n`;\n","import React, { useEffect, useState } from 'react';\nimport * as ApiService from '../../ApiService';\nimport { useParams } from 'react-router-dom';\n\nimport { ReviewsList, ReviewItem } from './Reviews.styled';\n\nconst Reviews = props => {\n  const [reviewsInfo, setReviewsInfo] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const getReviewsInfoByMovieId = async movieId => {\n      try {\n        const { results } = await ApiService.fetchReviewsInfoByMovieId(movieId);\n        setReviewsInfo(results);\n        console.log('results', results);\n      } catch (error) {\n        console.log(error.message);\n      }\n    };\n    getReviewsInfoByMovieId(movieId);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [movieId]);\n  return (\n    <ReviewsList>\n      {reviewsInfo !== [] ? (\n        reviewsInfo.map(({ id, author, content }) => (\n          <ReviewItem key={id}>\n            <article>\n              <p>\n                <b>{author}</b>\n              </p>\n              <p>{content}</p>\n            </article>\n          </ReviewItem>\n        ))\n      ) : (\n        <p>Unfortunately, no reviews yet </p>\n      )}\n    </ReviewsList>\n  );\n};\n\nexport default Reviews;\n"],"names":["API_KEY","axios","fetchTrendingMovies","response","data","fetchMovieById","movieId","fetchCastInfoByMovieId","fetchReviewsInfoByMovieId","fetchMoviesByName","movieName","ReviewsList","styled","ReviewItem","props","useState","reviewsInfo","setReviewsInfo","useParams","useEffect","getReviewsInfoByMovieId","ApiService","results","console","log","message","map","id","author","content"],"sourceRoot":""}