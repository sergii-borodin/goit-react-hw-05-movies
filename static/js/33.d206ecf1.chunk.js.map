{"version":3,"file":"static/js/33.d206ecf1.chunk.js","mappings":"6SAEMA,EAAU,mCAEhBC,EAAAA,EAAAA,SAAAA,QAAyB,gCAElB,IAAMC,EAAmB,mCAAG,oGACVD,EAAAA,EAAAA,IAAA,mBAJX,aAIW,oBAAuCD,IAD7B,cAC3BG,EAD2B,yBAG1BA,EAASC,MAHiB,2CAAH,qDAMnBC,EAAc,mCAAG,WAAMC,GAAN,uFACLL,EAAAA,EAAAA,IAAA,gBAAmBK,EAAnB,oBAAsCN,IADjC,cACtBG,EADsB,yBAGrBA,EAASC,MAHY,2CAAH,sDAMdG,EAAsB,mCAAG,WAAMD,GAAN,uFACbL,EAAAA,EAAAA,IAAA,gBACZK,EADY,4BACeN,IAFF,cAC9BG,EAD8B,yBAI7BA,EAASC,MAJoB,2CAAH,sDAOtBI,EAAyB,mCAAG,WAAMF,GAAN,uFAChBL,EAAAA,EAAAA,IAAA,gBACZK,EADY,4BACeN,IAFC,cACjCG,EADiC,yBAKhCA,EAASC,MALuB,2CAAH,sDAQzBK,EAAiB,mCAAG,WAAMC,GAAN,uFACRT,EAAAA,EAAAA,IAAA,+BACGD,EADH,kBACoBU,EADpB,oBADQ,cACzBP,EADyB,yBAKxBA,EAASC,MALe,2CAAH,qD,oKC/BjBO,EAAUC,EAAAA,GAAAA,IAAH,+DAKPC,EAAcD,EAAAA,GAAAA,IAAH,+CAIXE,EAAQF,EAAAA,GAAAA,GAAH,0C,SCkDlB,EAvDqB,SAAAG,GAAU,IAAD,IAC5B,GAAkCC,EAAAA,EAAAA,UAAS,CAAC,GAA5C,eAAOC,EAAP,KAAkBC,EAAlB,KACQZ,GAAYa,EAAAA,EAAAA,MAAZb,QACFc,GAAWC,EAAAA,EAAAA,MACXC,GAAYC,EAAAA,EAAAA,QAAM,oBAACH,EAASI,aAAV,aAAC,EAAgBC,YAAjB,QAAyB,WAEjDC,QAAQC,IAAIrB,IACZsB,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,mCAAG,WAAMvB,GAAN,gGAEEwB,EAAAA,GAA0BxB,GAF5B,OAEXF,EAFW,OAGjBc,EAAad,GACbsB,QAAQC,IAAI,YAAaV,GAJR,gDAMjBS,QAAQC,IAAI,KAAMI,SAND,yDAAH,sDASlBF,EAAavB,EAEd,GAAE,CAACA,IAEJ,IAAQ0B,EACNf,EADMe,MAAOC,EACbhB,EADagB,aAAcC,EAC3BjB,EAD2BiB,SAAUC,EACrClB,EADqCkB,OAAQC,EAC7CnB,EAD6CmB,YAAaC,EAC1DpB,EAD0DoB,QAG5D,OACE,iCACE,SAAC,KAAD,CAAMC,GAAIhB,EAAUiB,QAApB,sBACA,UAAC5B,EAAD,YACE,gBACE6B,IAAG,8CAAyCJ,GAC5CK,MAAM,MACNC,IAAKL,KAEP,UAACxB,EAAD,YACE,SAACC,EAAD,UAAQkB,KACR,0CAAiC,GAAfC,GAAmBU,UAArC,SACA,sCACA,uBAAIT,KACJ,oCACA,uBAAIC,GAAUA,EAAOS,KAAI,SAAAC,GAAK,OAAIA,EAAMC,KAAO,GAAjB,aAGlC,2BACE,yBACE,SAAC,KAAD,CAAMR,GAAG,OAAT,qBAEF,yBACE,SAAC,KAAD,CAAMA,GAAG,UAAT,2BAGJ,SAAC,KAAD,MAGL,C","sources":["ApiService.js","pages/MovieDetails/MovieDetails.styled.js","pages/MovieDetails/MovieDetails.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = '9fbe85233379d275904e898da5aa337c';\nconst query = 'movie/week';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const fetchTrendingMovies = async () => {\n  const response = await axios.get(`trending/${query}?api_key=${API_KEY}`);\n\n  return response.data;\n};\n\nexport const fetchMovieById = async movieId => {\n  const response = await axios.get(`movie/${movieId}?api_key=${API_KEY}`);\n\n  return response.data;\n};\n\nexport const fetchCastInfoByMovieId = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}/credits?api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\nexport const fetchReviewsInfoByMovieId = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}/reviews?api_key=${API_KEY}`\n  );\n\n  return response.data;\n};\n\nexport const fetchMoviesByName = async movieName => {\n  const response = await axios.get(\n    `search/movie?api_key=${API_KEY}&query=${movieName}&language=en-US`\n  );\n\n  return response.data;\n};\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  margin-top: 15px;\n  display: flex;\n`;\n\nexport const Description = styled.div`\n  padding-left: 25px;\n`;\n\nexport const Title = styled.h1`\n  margin-top: 0;\n`;\n","import React, { useEffect, useState, useRef } from 'react';\nimport { Link, Outlet, useParams, useLocation } from 'react-router-dom';\nimport * as ApiService from '../../ApiService';\n\nimport { Wrapper, Description, Title } from './MovieDetails.styled';\n\nconst MovieDetails = props => {\n  const [movieInfo, setMovieInfo] = useState({});\n  const { movieId } = useParams();\n  const location = useLocation();\n  const goBackRef = useRef(location.state?.from ?? '/movies');\n\n  console.log(movieId);\n  useEffect(() => {\n    const getMovieById = async movieId => {\n      try {\n        const data = await ApiService.fetchMovieById(movieId);\n        setMovieInfo(data);\n        console.log('movieInfo', movieInfo);\n      } catch (error) {\n        console.log(error.message);\n      }\n    };\n    getMovieById(movieId);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [movieId]);\n\n  const { title, vote_average, overview, genres, poster_path, tagline } =\n    movieInfo;\n\n  return (\n    <>\n      <Link to={goBackRef.current}>go back</Link>\n      <Wrapper>\n        <img\n          src={`https://image.tmdb.org/t/p/original/${poster_path}`}\n          width=\"300\"\n          alt={tagline}\n        />\n        <Description>\n          <Title>{title}</Title>\n          <p> User Score: {(vote_average * 10).toFixed()} %</p>\n          <h2>Overview</h2>\n          <p>{overview}</p>\n          <h3>Genres</h3>\n          <p>{genres && genres.map(genre => genre.name + ' ')}</p>\n        </Description>\n      </Wrapper>\n      <ul>\n        <li>\n          <Link to=\"cast\">Cast</Link>\n        </li>\n        <li>\n          <Link to=\"reviews\">Reviews</Link>\n        </li>\n      </ul>\n      <Outlet />\n    </>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["API_KEY","axios","fetchTrendingMovies","response","data","fetchMovieById","movieId","fetchCastInfoByMovieId","fetchReviewsInfoByMovieId","fetchMoviesByName","movieName","Wrapper","styled","Description","Title","props","useState","movieInfo","setMovieInfo","useParams","location","useLocation","goBackRef","useRef","state","from","console","log","useEffect","getMovieById","ApiService","message","title","vote_average","overview","genres","poster_path","tagline","to","current","src","width","alt","toFixed","map","genre","name"],"sourceRoot":""}